'go mod init name' to create go project

go working in acsii 
every go files is package
to use other files(package) import the package name in the 1st line of the file and main is the entry point
have to use var if its decalred

complier dont throw error in run time

array in go is fixed Length, same data type, indexable (for sure), save in contiguous memory location

loop in map will return a random order everyTime its run

slice in go are reference type which means while u copy a slice to another slice it will just copy the data's element pointer
its not create a new memory space for the data but it will create a use space for the slice not for the data's
so if u change the slice means i will effect the another slice to , so use make([]int, len()) and copy() for create a new slice with new data element space 
but the array in go are value type only, so its work normally creating a new space for copied array

General Verbs
Verb	Description
%v	Prints the value in a default format based on its type. (e.g., struct fields are printed)
%+v	Like %v, but for structs, it includes field names.
%#v	Prints the value in Go syntax (useful for debugging).
%T	Prints the type of the value.
%%	Prints a literal %.

Integer Formatting
Verb	Description
%d	Decimal (base 10) representation.
%b	Binary (base 2).
%o	Octal (base 8).
%x	Hexadecimal (base 16, lowercase).
%X	Hexadecimal (uppercase).
%c	Character representation of an integer (ASCII/Unicode).
%U	Unicode format (U+<codepoint>).

Example:

fmt.Printf("%d %b %o %x %X %c %U\n", 65, 65, 65, 65, 65, 65, 65)

Output:

65 1000001 101 41 41 A U+0041

Floating Point & Complex Numbers
Verb	Description
%f	Decimal floating point (default precision 6).
%e / %E	Scientific notation (lowercase/uppercase).
%g / %G	Uses %f or %e based on precision.
%x / %X	Hexadecimal floating point.

Example:

fmt.Printf("%f %e %g\n", 123.456, 123.456, 123.456)

Output:

123.456000 1.234560e+02 123.456

String & Byte Slices
Verb	Description
%s	Normal string.
%q	Quoted string.
%x / %X	Hex encoding of a string.

Example:

fmt.Printf("%s %q %x\n", "hello", "hello", "hello")

Output:

hello "hello" 68656c6c6f

Pointer
Verb	Description
%p	Prints pointer address in hexadecimal.

Example:

var x = 10
fmt.Printf("%p\n", &x)

Output:

0xc0000140a0  (example address)

Boolean
Verb	Description
%t	Prints true or false.

Example:

fmt.Printf("%t\n", true)

Output:

true

Special Formatting
Verb	Description
%6d	Width 6, right-aligned integer.
%-6d	Width 6, left-aligned integer.
%.2f	Floating point with 2 decimal places.
%06d	Padded with zeros to width 6.

Example:

fmt.Printf("|%6d|%-6d|%.2f|%06d|\n", 42, 42, 3.14159, 42)

Output:

|    42|42    |3.14|000042|

